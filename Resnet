import torch
from torch import nn
# from torchsummary import summary

class Residual(nn.Module):
    def __init__(self, in_channels, out_channels, conv1d=False, stride=1):
        super().__init__()
        self.c1 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, padding=1, stride=stride)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU()
        self.c2 = nn.Conv2d(in_channels=out_channels, out_channels=out_channels, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(out_channels)
        if conv1d:
            self.c3 = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=1, stride=stride)
        else:
            self.c3 = None

    def forward(self, x):
        y = self.bn2(self.c2(self.relu(self.bn2(self.c1(x)))))
        if self.c3:
            x = self.c3(x)
        return self.relu(y+x)


class ResNet18(nn.Module):
    def __init__(self,in_channels, num_classes):
        super().__init__()
        self.block1 = nn.Sequential(nn.Conv2d(in_channels=in_channels,out_channels=64, kernel_size=7, padding=3, stride=2), #112
                                    nn.BatchNorm2d(64),
                                    nn.ReLU(),
                                    nn.MaxPool2d(kernel_size=3, padding=1, stride=2)) #56
        self.block2 = nn.Sequential(Residual(64, 64),#56
                                    Residual(64, 64))
        self.block3 = nn.Sequential(Residual(64, 128, conv1d=True, stride=2),#28
                                    Residual(128, 128))
        self.block4 = nn.Sequential(Residual(128, 256, conv1d=True, stride=2),#14
                                    Residual(256, 256))
        self.block5 = nn.Sequential(Residual(256, 512, conv1d=True, stride=2),#7
                                    Residual(512, 512))
        self.block6 = nn.Sequential(nn.AdaptiveAvgPool2d((1,1)),
                                    nn.Flatten(),
                                    nn.Linear(512, num_classes))
    def forward(self, x):
        x = self.block1(x)
        x = self.block2(x)
        x = self.block3(x)
        x = self.block4(x)
        x = self.block5(x)
        x = self.block6(x)
        return x

# if __name__ == "__main__":
#     device = "cuda" if torch.cuda.is_available() else "cpu"
#     model = ResNet18(in_channels=1, num_classes=10).to(device)
#     print(summary(model, (1,224,224)))
